generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("VITE_DATABASE_URL")
}

enum Role {
  MEMBER
  ADMIN
}

enum UserStatus {
  PENDING
  ACTIVE
  BANNED
}

enum PigmentType {
  HISTORIC
  CINATURAL
  CIPIGMENT
}

enum SwatchCardTypeName {
  GRADIENT
  GRANULATION
  DISPERSEMENT
  HIGH_DILUTION
  MID_DILUTION
  MASSTONE
  GLAZE
  WET_LIFT
  DRY_LIFT
}

model User {
  id             Int          @id @default(autoincrement())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deleted        Boolean      @default(false)
  email          String       @unique @db.Citext
  hashedPassword String
  displayName    String
  role           Role         @default(MEMBER)
  status         UserStatus   @default(PENDING)
  swatches       Swatch[]
  swatchCards    SwatchCard[]
  notes          Note[]
}

model Swatch {
  id                             Int                  @id @default(autoincrement())
  createdAt                      DateTime             @default(now())
  updatedAt                      DateTime             @updatedAt
  deleted                        Boolean              @default(false)
  published                      Boolean              @default(false)
  author                         User                 @relation(fields: [authorId], references: [id])
  authorId                       Int
  slug                           String               @unique
  manufacturer                   Manufacturer?        @relation(fields: [manufacturerId], references: [id])
  manufacturerId                 Int?
  paintType                      PaintType            @relation(fields: [paintTypeId], references: [id])
  line                           Line?                @relation(fields: [lineId], references: [id])
  lineId                         Int?
  paintTypeId                    Int
  productUrl                     String?
  productColorName               String
  communityDescription           String?
  manufacturerDescription        String?
  manufacturerPigmentDescription String?
  hex                            String?
  lightfastRating                LightfastRating      @relation(fields: [lightfastRatingId], references: [id])
  lightfastRatingId              Int
  transparencyRating             TransparencyRating   @relation(fields: [transparencyRatingId], references: [id])
  transparencyRatingId           Int
  stainingRating                 StainingRating       @relation(fields: [stainingRatingId], references: [id])
  stainingRatingId               Int
  granulationRating              GranulationRating    @relation(fields: [granulationRatingId], references: [id])
  granulationRatingId            Int
  swatchCardsOnSwatch            SwatchCardsOnSwatch?
  pigments                       PigmentsOnSwatches[]
  notes                          Note[]
  tags                           TagsOnSwatches[]

  // SwatchCard SwatchCard[]
  @@unique([manufacturerId, productColorName])
}

model Pigment {
  id               Int                  @id @default(autoincrement())
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
  type             PigmentType          @default(CIPIGMENT)
  name             String
  number           Int
  color            Color                @relation(fields: [colorId], references: [id])
  colorId          Int
  imageKitUpload   ImageKitUpload?      @relation(fields: [imageKitUploadId], references: [id])
  imageKitUploadId Int?
  swatches         PigmentsOnSwatches[]

  @@unique([type, colorId, number])
}

model PigmentsOnSwatches {
  id        Int      @id @default(autoincrement())
  swatch    Swatch   @relation(fields: [swatchId], references: [id])
  swatchId  Int
  pigment   Pigment  @relation(fields: [pigmentId], references: [id])
  pigmentId Int
  setAt     DateTime @default(now())
}

model Tag {
  id        Int              @id @default(autoincrement())
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  label     String
  slug      String
  swatches  TagsOnSwatches[]

  @@unique([label, slug])
}

model TagsOnSwatches {
  id       Int      @id @default(autoincrement())
  swatch   Swatch   @relation(fields: [swatchId], references: [id])
  swatchId Int
  tag      Tag      @relation(fields: [tagId], references: [id])
  tagId    Int
  setAt    DateTime @default(now())
}

model SwatchCard {
  id                     Int                   @id @default(autoincrement())
  createdAt              DateTime              @default(now())
  updatedAt              DateTime              @updatedAt
  deleted                Boolean               @default(false)
  paper                  Paper?                @relation(fields: [paperId], references: [id])
  paperId                Int?
  swatchCardType         SwatchCardType?       @relation(fields: [swatchCardTypeName], references: [name])
  swatchCardTypeName     SwatchCardTypeName?
  author                 User?                 @relation(fields: [authorId], references: [id])
  authorId               Int?
  description            String?
  imageKitUpload         ImageKitUpload?       @relation(fields: [imageKitUploadId], references: [id])
  imageKitUploadId       Int?
  swatchCardGradient     SwatchCardsOnSwatch[] @relation("swatchCardGradient")
  swatchCardGranulation  SwatchCardsOnSwatch[] @relation("swatchCardGranulation")
  swatchCardDispersement SwatchCardsOnSwatch[] @relation("swatchCardDispersement")
  swatchCardHighDilution SwatchCardsOnSwatch[] @relation("swatchCardHighDilution")
  swatchCardMidDilution  SwatchCardsOnSwatch[] @relation("swatchCardMidDilution")
  swatchCardMasstone     SwatchCardsOnSwatch[] @relation("swatchCardMasstone")
  swatchCardGlaze        SwatchCardsOnSwatch[] @relation("swatchCardGlaze")
  swatchCardWetLift      SwatchCardsOnSwatch[] @relation("swatchCardWetLift")
  swatchCardDryLift      SwatchCardsOnSwatch[] @relation("swatchCardDryLift")
}

model SwatchCardsOnSwatch {
  id             Int         @id @default(autoincrement())
  swatch         Swatch      @relation(fields: [swatchId], references: [id])
  swatchId       Int         @unique
  gradient       SwatchCard? @relation("swatchCardGradient", fields: [gradientId], references: [id])
  gradientId     Int?
  granulation    SwatchCard? @relation("swatchCardGranulation", fields: [granulationId], references: [id])
  granulationId  Int?
  dispersement   SwatchCard? @relation("swatchCardDispersement", fields: [dispersementId], references: [id])
  dispersementId Int?
  highDilution   SwatchCard? @relation("swatchCardHighDilution", fields: [highDilutionId], references: [id])
  highDilutionId Int?
  midDilution    SwatchCard? @relation("swatchCardMidDilution", fields: [midDilutionId], references: [id])
  midDilutionId  Int?
  masstone       SwatchCard? @relation("swatchCardMasstone", fields: [masstoneId], references: [id])
  masstoneId     Int?
  glaze          SwatchCard? @relation("swatchCardGlaze", fields: [glazeId], references: [id])
  glazeId        Int?
  wetLift        SwatchCard? @relation("swatchCardWetLift", fields: [wetLiftId], references: [id])
  wetLiftId      Int?
  dryLift        SwatchCard? @relation("swatchCardDryLift", fields: [dryLiftId], references: [id])
  dryLiftId      Int?
}

model SwatchCardType {
  id          Int                @id @default(autoincrement())
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  name        SwatchCardTypeName @unique
  label       String
  description String
  swatchCards SwatchCard[]
}

model Paper {
  id             Int           @id @default(autoincrement())
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  swatchCards    SwatchCard[]
  manufacturer   Manufacturer? @relation(fields: [manufacturerId], references: [id])
  manufacturerId Int?
  line           Line?         @relation(fields: [lineId], references: [id])
  lineId         Int?
  description    String
  weightInLbs    Int
}

model Note {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  author     User     @relation(fields: [authorId], references: [id])
  authorId   Int
  swatch     Swatch   @relation(fields: [swatchId], references: [id])
  swatchId   Int
  approved   Boolean  @default(false)
  content    String
  childNotes Note[]   @relation("NoteToNote")
  note       Note?    @relation("NoteToNote", fields: [noteId], references: [id])
  noteId     Int?
}

model Manufacturer {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String   @unique @db.Citext
  website   String?
  swatches  Swatch[]
  papers    Paper[]
  lines     Line[]
}

model Line {
  id             Int           @id @default(autoincrement())
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  manufacturer   Manufacturer? @relation(fields: [manufacturerId], references: [id])
  manufacturerId Int?
  name           String        @unique @db.Citext
  papers         Paper[]
  swatches       Swatch[]
}

model PaintType {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  label     String   @unique
  slug      String   @unique
  swatches  Swatch[]
}

model Color {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  label     String    @unique
  slug      String    @unique
  code      String    @unique
  pigments  Pigment[]
}

model LightfastRating {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  label       String
  description String?
  swatch      Swatch[]
}

model TransparencyRating {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  label       String
  description String?
  swatch      Swatch[]
}

model StainingRating {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  label       String
  description String?
  swatch      Swatch[]
}

model GranulationRating {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  label       String
  description String?
  swatch      Swatch[]
}

model ImageKitUpload {
  id           Int          @id @default(autoincrement())
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  fileId       String
  filePath     String
  name         String
  thumbnailUrl String
  url          String
  swatchCard   SwatchCard[]
  pigment      Pigment[]
}
