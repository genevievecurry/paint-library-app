generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("VITE_DATABASE_URL")
}

enum Role {
  MEMBER
  ADMIN
}

enum UserStatus {
  PENDING
  ACTIVE
  BANNED
}

enum PigmentType {
  HISTORIC
  CINATURAL
  CIPIGMENT
}

enum SwatchCardTypeName {
  GRADIENT
  GRANULATION
  DISPERSEMENT
  HIGH_DILUTION
  MID_DILUTION
  MASSTONE
  GLAZE
  WET_LIFT
  DRY_LIFT
}

model User {
  id             Int                   @id @default(autoincrement())
  createdAt      DateTime              @default(now())
  updatedAt      DateTime?             @updatedAt
  deleted        Boolean               @default(false)
  email          String                @unique @db.Citext
  hashedPassword String                @db.VarChar(100)
  firstName      String                @db.VarChar(100)
  lastName       String?               @db.VarChar(100)
  username       String                @unique @db.Citext
  uuid           String                @unique
  role           Role                  @default(MEMBER)
  status         UserStatus            @default(PENDING)
  paints         Paint[]
  swatchCards    SwatchCard[]
  notes          Note[]
  userToken      UserToken[]
  ownedPalettes  Palette[]
  savedPalettes  PaletteSavedByUsers[]
}

model UserToken {
  id       Int    @id @default(autoincrement())
  token    String
  context  String
  sentTo   String
  user     User   @relation(fields: [userUuid], references: [uuid])
  userUuid String
}

model Paint {
  id                      Int                @id @default(autoincrement())
  createdAt               DateTime           @default(now())
  updatedAt               DateTime?          @updatedAt
  deleted                 Boolean            @default(false)
  published               Boolean            @default(false)
  author                  User               @relation(fields: [authorUuid], references: [uuid])
  authorUuid              String
  uuid                    String             @unique
  slug                    String
  manufacturer            Manufacturer?      @relation(fields: [manufacturerId], references: [id])
  manufacturerId          Int?
  paintType               PaintType          @relation(fields: [paintTypeId], references: [id])
  paintTypeId             Int
  line                    Line?              @relation(fields: [lineId], references: [id])
  lineId                  Int?
  productUrl              String?            @db.VarChar(140)
  name                    String             @db.VarChar(140)
  communityDescription    String?            @db.VarChar(500)
  manufacturerDescription String?            @db.VarChar(500)
  hex                     String?            @db.VarChar(10)
  lightfastRating         LightfastRating    @relation(fields: [lightfastRatingId], references: [id])
  lightfastRatingId       Int
  transparencyRating      TransparencyRating @relation(fields: [transparencyRatingId], references: [id])
  transparencyRatingId    Int
  stainingRating          StainingRating     @relation(fields: [stainingRatingId], references: [id])
  stainingRatingId        Int
  granulationRating       GranulationRating  @relation(fields: [granulationRatingId], references: [id])
  granulationRatingId     Int
  swatchCard              SwatchCard[]
  pigmentsOnPaints        PigmentsOnPaints[]
  notes                   Note[]
  tags                    TagsOnPaints[]
  paintsInPalette         PaintsInPalette[]

  @@unique([manufacturerId, name])
}

model Pigment {
  id                   Int                 @id @default(autoincrement())
  createdAt            DateTime            @default(now())
  updatedAt            DateTime?           @updatedAt
  slug                 String              @unique
  type                 PigmentType         @default(CIPIGMENT)
  name                 String              @db.VarChar(60)
  number               String              @db.VarChar(4)
  hex                  String?             @db.VarChar(10)
  color                Color               @relation(fields: [colorCode], references: [code])
  colorCode            String
  imageKitUpload       ImageKitUpload?     @relation(fields: [imageKitUploadId], references: [id])
  imageKitUploadId     Int?
  lightfastRating      LightfastRating?    @relation(fields: [lightfastRatingId], references: [id])
  lightfastRatingId    Int?
  transparencyRating   TransparencyRating? @relation(fields: [transparencyRatingId], references: [id])
  transparencyRatingId Int?
  paints               PigmentsOnPaints[]

  @@unique([type, colorCode, number])
}

model PigmentsOnPaints {
  id        Int      @id @default(autoincrement())
  paint     Paint    @relation(fields: [paintId], references: [id])
  paintId   Int
  pigment   Pigment  @relation(fields: [pigmentId], references: [id])
  pigmentId Int
  setAt     DateTime @default(now())
}

model Tag {
  id          Int                 @id @default(autoincrement())
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  label       String              @db.VarChar(60)
  slug        String
  paints      TagsOnPaints[]
  swatchCards TagsOnSwatchCards[]

  @@unique([label, slug])
}

model TagsOnPaints {
  id      Int      @id @default(autoincrement())
  paint   Paint    @relation(fields: [paintId], references: [id])
  paintId Int
  tag     Tag      @relation(fields: [tagId], references: [id])
  tagId   Int
  setAt   DateTime @default(now())
}

model TagsOnSwatchCards {
  id           Int        @id @default(autoincrement())
  swatchCard   SwatchCard @relation(fields: [swatchCardId], references: [id])
  swatchCardId Int
  tag          Tag        @relation(fields: [tagId], references: [id])
  tagId        Int
  setAt        DateTime   @default(now())
}

model SwatchCard {
  id                  Int                 @id @default(autoincrement())
  createdAt           DateTime            @default(now())
  updatedAt           DateTime?           @updatedAt
  deleted             Boolean             @default(false)
  author              User?               @relation(fields: [authorUuid], references: [uuid])
  authorUuid          String?
  description         String?
  imageKitUpload      ImageKitUpload?     @relation(fields: [imageKitUploadId], references: [id])
  imageKitUploadId    Int?
  tags                TagsOnSwatchCards[]
  paint               Paint               @relation(fields: [paintId], references: [id])
  paintId             Int
  paperManufacturer   Manufacturer?       @relation(fields: [paperManufacturerId], references: [id])
  paperManufacturerId Int?
  paperLine           Line?               @relation(fields: [paperLineId], references: [id])
  paperLineId         Int?
  paperType           PaperType?          @relation(fields: [paperTypeId], references: [id])
  paperTypeId         Int?
  paperWeightInLbs    Int?

  swatchCardTypesOnSwatchCard SwatchCardTypesOnSwatchCard[]

}

model SwatchCardType {
  id                          Int                           @id @default(autoincrement())
  createdAt                   DateTime                      @default(now())
  updatedAt                   DateTime?                     @updatedAt
  name                        SwatchCardTypeName            @unique
  label                       String                        @db.VarChar(60)
  description                 String                        @db.VarChar(240)
  swatchCardTypesOnSwatchCard SwatchCardTypesOnSwatchCard[]
}

model SwatchCardTypesOnSwatchCard {
  id                 Int                 @id @default(autoincrement())
  swatchCard         SwatchCard          @relation(fields: [swatchCardId], references: [id])
  swatchCardId       Int
  swatchCardType     SwatchCardType?     @relation(fields: [swatchCardTypeName], references: [name])
  swatchCardTypeName SwatchCardTypeName?
}

model PaperType {
  id         Int          @id @default(autoincrement())
  createdAt  DateTime     @default(now())
  updatedAt  DateTime?    @updatedAt
  name       String
  swatchCard SwatchCard[]
}

model Note {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt
  author     User      @relation(fields: [authorUuid], references: [uuid])
  authorUuid String
  paint      Paint     @relation(fields: [paintId], references: [id])
  paintId    Int
  approved   Boolean   @default(false)
  content    String    @db.VarChar(500)
  childNotes Note[]    @relation("NoteToNote")
  note       Note?     @relation("NoteToNote", fields: [noteId], references: [id])
  noteId     Int?
}

model Manufacturer {
  id         Int          @id @default(autoincrement())
  createdAt  DateTime     @default(now())
  updatedAt  DateTime?    @updatedAt
  name       String       @unique
  website    String?
  paints     Paint[]
  lines      Line[]
  swatchCard SwatchCard[]
}

model Line {
  id               Int          @id @default(autoincrement())
  createdAt        DateTime     @default(now())
  updatedAt        DateTime?    @updatedAt
  manufacturer     Manufacturer @relation(fields: [manufacturerName], references: [name])
  manufacturerName String
  name             String
  paints           Paint[]
  swatchCard       SwatchCard[]

  @@unique([manufacturerName, name])
}

model PaintType {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  label     String    @unique
  slug      String    @unique
  paints    Paint[]
}

model Color {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  label     String    @unique
  slug      String    @unique
  code      String    @unique
  hex       String    @default("#ffffff")
  pigments  Pigment[]
}

model LightfastRating {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  code        String    @unique
  label       String
  description String?
  paint       Paint[]
  pigment     Pigment[]
}

model TransparencyRating {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  code        String    @unique
  label       String
  description String?
  paint       Paint[]
  pigment     Pigment[]
}

model StainingRating {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  code        String   @unique
  label       String
  description String?
  paint       Paint[]
}

model GranulationRating {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  code        String   @unique
  label       String
  description String?
  paint       Paint[]
}

model ImageKitUpload {
  id           Int          @id @default(autoincrement())
  createdAt    DateTime     @default(now())
  updatedAt    DateTime?    @updatedAt
  fileId       String
  filePath     String
  name         String
  thumbnailUrl String
  url          String
  height       Int?
  width        Int?
  swatchCard   SwatchCard[]
  pigment      Pigment[]
}

model Palette {
  id              Int                   @id @default(autoincrement())
  createdAt       DateTime              @default(now())
  updatedAt       DateTime?             @updatedAt
  deleted         Boolean               @default(false)
  visible         Boolean               @default(true)
  uuid            String                @unique
  slug            String
  title           String                @db.VarChar(60)
  description     String?               @db.VarChar(240)
  owner           User                  @relation(fields: [ownerUuid], references: [uuid])
  ownerUuid       String
  paintsInPalette PaintsInPalette[]
  savedByUsers    PaletteSavedByUsers[]
}

model PaintsInPalette {
  id          Int      @id @default(autoincrement())
  setAt       DateTime @default(now())
  order       Int?     @default(autoincrement())
  palette     Palette  @relation(fields: [paletteUuid], references: [uuid])
  paletteUuid String
  paint       Paint    @relation(fields: [paintUuid], references: [uuid])
  paintUuid   String
}

model PaletteSavedByUsers {
  id          Int      @id @default(autoincrement())
  setAt       DateTime @default(now())
  palette     Palette  @relation(fields: [paletteUuid], references: [uuid])
  paletteUuid String
  user        User     @relation(fields: [userUuid], references: [uuid])
  userUuid    String
}
