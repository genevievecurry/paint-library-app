generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  MEMBER
  ADMIN
}

enum UserStatus {
  PENDING
  ACTIVE
  BANNED
}

enum PigmentType {
  HISTORIC
  CINATURAL
  CIPIGMENT
}

model User {
  id             Int          @id @default(autoincrement())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deleted        Boolean      @default(false)
  email          String       @unique @db.Citext
  hashedPassword String
  displayName    String
  role           Role         @default(MEMBER)
  status         UserStatus   @default(PENDING)
  swatches       Swatch[]
  swatchCards    SwatchCard[]
  notes          Note[]
}

model Swatch {
  id                             Int                @id @default(autoincrement())
  createdAt                      DateTime           @default(now())
  updatedAt                      DateTime           @updatedAt
  deleted                        Boolean            @default(false)
  published                      Boolean            @default(false)
  author                         User               @relation(fields: [authorId], references: [id])
  authorId                       Int
  slug                           String             @unique
  manufacturer                   Manufacturer?      @relation(fields: [manufacturerId], references: [id])
  manufacturerId                 Int?
  paintType                      PaintType          @relation(fields: [paintTypeId], references: [id])
  paintTypeId                    Int
  productUrl                     String?
  productColorName               String
  communityDescription           String?
  manufacturerDescription        String?
  manufacturerPigmentDescription String?
  lightfastRating                LightfastRating    @relation(fields: [lightfastRatingId], references: [id])
  lightfastRatingId              Int
  transparencyRating             TransparencyRating @relation(fields: [transparencyRatingId], references: [id])
  transparencyRatingId           Int
  stainingRating                 StainingRating     @relation(fields: [stainingRatingId], references: [id])
  stainingRatingId               Int
  granulationRating              GranulationRating  @relation(fields: [granulationRatingId], references: [id])
  granulationRatingId            Int
  pigments                       PigmentOnSwatch[]
  swatchCards                    SwatchCard[]
  notes                          Note[]
  tags                           Tag[]

  @@unique([manufacturerId, productColorName])
}

model Pigment {
  id        Int               @id @default(autoincrement())
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  type      PigmentType       @default(CIPIGMENT)
  name      String
  number    Int
  color     Color             @relation(fields: [colorId], references: [id])
  colorId   Int
  swatches  PigmentOnSwatch[]

  @@unique([type, colorId, number])
}

model PigmentOnSwatch {
  id        Int     @id @default(autoincrement())
  swatch    Swatch  @relation(fields: [swatchId], references: [id])
  swatchId  Int
  pigment   Pigment @relation(fields: [pigmentId], references: [id])
  pigmentId Int
}

model SwatchCard {
  id               Int             @id @default(autoincrement())
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  deleted          Boolean         @default(false)
  swatch           Swatch          @relation(fields: [swatchId], references: [id])
  swatchId         Int
  paper            Paper           @relation(fields: [paperId], references: [id])
  paperId          Int
  swatchCardType   SwatchCardType? @relation(fields: [swatchCardTypeId], references: [id])
  swatchCardTypeId Int?
  author           User            @relation(fields: [authorId], references: [id])
  authorId         Int
  description      String?
}

model SwatchCardType {
  id          Int          @id @default(autoincrement())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  label       String
  description String
  swatchCards SwatchCard[]
}

model Paper {
  id             Int           @id @default(autoincrement())
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  swatchCards    SwatchCard[]
  manufacturer   Manufacturer? @relation(fields: [manufacturerId], references: [id])
  manufacturerId Int?
  description    String
  weightInLbs    Int
}

model Note {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  author     User     @relation(fields: [authorId], references: [id])
  authorId   Int
  swatch     Swatch   @relation(fields: [swatchId], references: [id])
  swatchId   Int
  approved   Boolean  @default(false)
  content    String
  childNotes Note[]   @relation("NoteToNote")
  note       Note?    @relation("NoteToNote", fields: [noteId], references: [id])
  noteId     Int?
}

model Tag {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  label     String
  slug      String
  swatch    Swatch   @relation(fields: [swatchId], references: [id])
  swatchId  Int

  @@unique([label, slug])
}

model Manufacturer {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String   @unique @db.Citext
  website   String?
  swatches  Swatch[]
  papers    Paper[]
}

model PaintType {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  label     String   @unique
  slug      String   @unique
  swatches  Swatch[]
}

model Color {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  label     String    @unique
  slug      String    @unique
  code      String    @unique
  pigments  Pigment[]
}

model LightfastRating {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  label       String
  description String?
  Swatch      Swatch[]
}

model TransparencyRating {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  label       String
  description String?
  Swatch      Swatch[]
}

model StainingRating {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  label       String
  description String?
  Swatch      Swatch[]
}

model GranulationRating {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  label       String
  description String?
  Swatch      Swatch[]
}
