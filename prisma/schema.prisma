// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  MEMBER
  ADMIN
}

enum UserStatus {
  PENDING
  ACTIVE
  BANNED
}

model Users {
  id          Int           @id @default(autoincrement())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  deleted     Boolean       @default(false)
  email       String        @unique @db.Citext
  displayName String
  role        Role          @default(MEMBER)
  status      UserStatus    @default(PENDING)
  statusId    Int
  swatches    Swatches[]
  swatchCards SwatchCards[]
  notes       Notes[]
}

model Swatches {
  id                             Int                  @id @default(autoincrement())
  createdAt                      DateTime             @default(now())
  updatedAt                      DateTime             @updatedAt
  deleted                        Boolean              @default(false)
  published                      Boolean              @default(false)
  author                         Users                @relation(fields: [authorId], references: [id])
  authorId                       Int
  slug                           String               @unique
  manufacturer                   Manufacturers?       @relation(fields: [manufacturerId], references: [id])
  manufacturerId                 Int?
  paintType                      PaintTypes           @relation(fields: [paintTypeId], references: [id])
  paintTypeId                    Int
  productUrl                     String?
  productColorName               String
  communityDescription           String?
  manufacturerDescription        String?
  manufacturerPigmentDescription String?
  pigments                       PigmentsOnSwatches[]
  ratings                        RatingsOnSwatches[]


  swatchCards SwatchCards[]
  notes       Notes[]
  @@unique([manufacturerId, productColorName])
}

model RatingsOnSwatches {
  id                   Int                 @id @default(autoincrement())
  swatch               Swatches            @relation(fields: [swatchId], references: [id])
  swatchId             Int                 @unique
  lightfastRating      LightfastRatings    @relation(fields: [lightfastRatingId], references: [id])
  lightfastRatingId    Int
  transparencyRating   TransparencyRatings @relation(fields: [transparencyRatingId], references: [id])
  transparencyRatingId Int
  stainingRating       StainingRatings     @relation(fields: [stainingRatingId], references: [id])
  stainingRatingId     Int
  granulationRating    GranulationRatings  @relation(fields: [granulationRatingId], references: [id])
  granulationRatingId  Int
}

model Pigments {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  code      String   @unique
  name      String
  number    Int
  color     Colors   @relation(fields: [colorId], references: [id])
  colorId   Int

  swatches PigmentsOnSwatches[]
}

model PigmentsOnSwatches {
  swatch    Swatches @relation(fields: [swatchId], references: [id])
  swatchId  Int
  pigment   Pigments @relation(fields: [pigmentId], references: [id])
  pigmentId Int

  @@id([swatchId, pigmentId])
}

model SwatchCards {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deleted   Boolean  @default(false)

  swatch           Swatches         @relation(fields: [swatchId], references: [id])
  swatchId         Int
  paper            Papers           @relation(fields: [paperId], references: [id])
  paperId          Int
  swatchCardType   SwatchCardTypes? @relation(fields: [swatchCardTypeId], references: [id])
  swatchCardTypeId Int?
  author           Users            @relation(fields: [authorId], references: [id])
  authorId         Int
  description      String?
}

model SwatchCardTypes {
  id          Int           @id @default(autoincrement())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  label       String
  swatchCards SwatchCards[]
}

model Papers {
  id             Int            @id @default(autoincrement())
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  swatchCards    SwatchCards[]
  manufacturer   Manufacturers? @relation(fields: [manufacturerId], references: [id])
  manufacturerId Int?
  description    String
  weightInLbs    Int
}

model Notes {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  author     Users    @relation(fields: [authorId], references: [id])
  authorId   Int
  swatch     Swatches @relation(fields: [swatchId], references: [id])
  swatchId   Int
  approved   Boolean  @default(false)
  content    String
  childNotes Notes[]  @relation("NotesToNotes")
  Notes      Notes?   @relation("NotesToNotes", fields: [notesId], references: [id])
  notesId    Int?
}

model Tags {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  label     String

  @@unique([label])
}

model Manufacturers {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  name      String     @unique @db.Citext
  website   String?
  swatches  Swatches[]
  papers    Papers[]
}

model PaintTypes {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  label     String     @unique
  slug      String     @unique
  swatches  Swatches[]
}

model Colors {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  label     String     @unique
  slug      String     @unique
  code      String     @unique
  pigments  Pigments[]
}

model LightfastRatings {
  id                Int                 @id @default(autoincrement())
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  label             String
  description       String?
  ratingsOnSwatches RatingsOnSwatches[]
}

model TransparencyRatings {
  id                Int                 @id @default(autoincrement())
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  label             String
  description       String?
  ratingsOnSwatches RatingsOnSwatches[]
}

model StainingRatings {
  id                Int                 @id @default(autoincrement())
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  label             String
  description       String?
  ratingsOnSwatches RatingsOnSwatches[]
}

model GranulationRatings {
  id                Int                 @id @default(autoincrement())
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  label             String
  description       String?
  ratingsOnSwatches RatingsOnSwatches[]
}
